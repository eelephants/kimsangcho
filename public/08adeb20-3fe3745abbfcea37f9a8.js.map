{"version":3,"sources":["webpack://kimsangcho/./src/templates/template.js"],"names":["mainImages","bodyClass","BodyClassGif","merrac","MerracGif","airForce","hdc","subImages","BodyClassTitleMain","BodyClassLogin","BodyClassMain2","BodyClassMain1","BodyClassClass","BodyClassTrainer","BodyClassCart","BodyClassMy","MerracTitleMain1","MerracTitleMain2","MerracMenu1","MerracMenu2","MerracAdmin","Polrep1","Polrep2","Polrep3","WebGis1","WebGis2","WebGis3","WebGis4","HdcSplash","HdcView5","HdcView4","HdcView3","HdcView2","HdcView1","noImageComment","SwiperCore","Navigation","TemplatePost","data","location","ArrowBackCircleIcon","ArrowLeftS","RightArrowCircleIcon","ArrowRightS","ArrowBackWhiteCircleIcon","RightArrowWhiteCircleIcon","post","markdownRemark","useState","scrollY","setScrollY","isShow","setIsShow","useEffect","window","addEventListener","eventScroll","removeEventListener","navigationPrevRef","useRef","navigationNextRef","navigationRoleNextRef","navigationRolePrevRef","getImage","name","styles","color","textDecoration","diplay","css","boxWrapper","frontmatter","title","category","xmlns","viewBox","d","stroke","stroke-width","fill","intro","startDate","endDate","roleTitle","skills","map","item","images","src","alt","roles","length","className","small","backGroundcolor","absolute","left","style","ref","right","navigation","slidesPerView","prevEl","current","nextEl","onSwiper","swiper","setTimeout","params","destroy","init","update","index","key","onClick","roleWrapper","titleWrapper","descWrapper","desc","el","top","autoHeight"],"mappings":"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","file":"08adeb20-3fe3745abbfcea37f9a8.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport { graphql } from 'gatsby';\nimport AppLayout from '../components/AppLayout/AppLayout';\nimport { css } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport SwiperCore, { Navigation } from 'swiper/core';\nimport 'swiper/swiper.min.css';\nimport 'swiper/components/navigation/navigation.min.css';\nimport Button from '../components/Button';\nimport { ArrowLeftS } from '@emotion-icons/remix-fill/ArrowLeftS';\nimport { ArrowRightS } from '@emotion-icons/remix-fill/ArrowRightS';\nimport { AccessAlarm } from '@emotion-icons/material/AccessAlarm';\nimport { FileX } from '@emotion-icons/bootstrap';\nimport { flushSync } from 'react-dom';\n\nimport {\n  BodyClassGif,\n  MerracGif,\n  BodyClassLogin,\n  BodyClassMain2,\n  BodyClassMain1,\n  BodyClassTitleMain,\n  BodyClassClass,\n  BodyClassTrainer,\n  BodyClassCart,\n  BodyClassMy,\n  MerracTitleMain1,\n  MerracTitleMain2,\n  MerracMenu1,\n  MerracMenu2,\n  MerracAdmin,\n  Polrep1,\n  Polrep2,\n  Polrep3,\n  WebGis1,\n  WebGis2,\n  WebGis3,\n  WebGis4,\n  HdcSplash,\n  HdcView1,\n  HdcView2,\n  HdcView3,\n  HdcView4,\n  HdcView5,\n} from '../assets/index.js';\nconst mainImages = {\n  bodyClass: BodyClassGif,\n  merrac: MerracGif,\n  airForce: '',\n  hdc: '',\n};\n\nconst subImages = {\n  bodyClass: [\n    BodyClassTitleMain,\n    BodyClassLogin,\n    BodyClassMain2,\n    BodyClassMain1,\n    BodyClassClass,\n    BodyClassTrainer,\n    BodyClassCart,\n    BodyClassMy,\n  ],\n  merrac: [\n    MerracTitleMain1,\n    MerracTitleMain2,\n    MerracMenu1,\n    MerracMenu2,\n    MerracAdmin,\n    Polrep1,\n    Polrep2,\n    Polrep3,\n    WebGis1,\n    WebGis2,\n    WebGis3,\n    WebGis4,\n  ],\n  airForce: [],\n  hdc: [HdcSplash, HdcView5, HdcView4, HdcView3, HdcView2, HdcView1],\n};\n\nconst noImageComment = `Sorry, Leakage to the outside is prohibited, so it is impossible to share the site`;\n\nSwiperCore.use([Navigation]);\n\nexport default function TemplatePost({ data, location }) {\n  const ArrowBackCircleIcon = styled(ArrowLeftS)`\n    color: #000;\n    width: 80%;\n    height: auto;\n  `;\n\n  const RightArrowCircleIcon = styled(ArrowRightS)`\n    color: #000;\n    width: 80%;\n    height: auto;\n  `;\n\n  const ArrowBackWhiteCircleIcon = styled(ArrowLeftS)`\n    color: #fff;\n    width: 50%;\n    height: auto;\n  `;\n\n  const RightArrowWhiteCircleIcon = styled(ArrowRightS)`\n    color: #fff;\n    width: 50%;\n    height: auto;\n  `;\n\n  const Task = styled(AccessAlarm)`\n    color: #000;\n    width: 100%;\n    height: auto;\n  `;\n\n  const post = data.markdownRemark;\n  const [scrollY, setScrollY] = useState(0);\n  const [isShow, setIsShow] = useState(0);\n  useEffect(() => {\n    // scroll\n    window.addEventListener('scroll', eventScroll);\n    return () => {\n      window.removeEventListener('scroll', eventScroll);\n    };\n  }, []);\n\n  const navigationPrevRef = useRef(null);\n  const navigationNextRef = useRef(null);\n  const navigationRoleNextRef = useRef(null);\n  const navigationRolePrevRef = useRef(null);\n\n  const eventScroll = () => setScrollY(window.scrollY);\n\n  const getImage = (name) => subImages[name];\n\n  return (\n    <AppLayout>\n      <AppLayout.Header location={location} scrollY={scrollY} />\n      <AppLayout.Main\n        styles={{\n          color: 'white',\n          textDecoration: 'none',\n          'padding-top': '10vh',\n          diplay: 'grid',\n          'grid-template-rows': 'repeat(4, min-content) 1fr',\n          'grid-template-columns': '100%',\n        }}\n      >\n        <section\n          css={[\n            boxWrapper,\n            css`\n              display: grid;\n              grid-template-rows: 1fr 1fr 2fr;\n            `,\n          ]}\n        >\n          <div\n            css={css`\n              display: grid;\n              grid-template-columns: 4fr 1fr;\n              align-items: center;\n              justify-items: center;\n              font-size: 4rem;\n              ext-transform: uppercase;\n              letter-spacing: 1rem;\n              font-weight: bold;\n            `}\n          >\n            <div>{post.frontmatter.title}</div>\n            <div\n              css={css`\n                justify-self: start;\n                font-size: 1rem;\n                border-bottom: 1px solid;\n                width: 1.7rem;\n                transform: rotate(90deg);\n              `}\n            ></div>\n          </div>\n          <div\n            css={css`\n              display: grid;\n              grid-template-columns: 4fr 1fr;\n            `}\n          >\n            <div></div>\n            <div>\n              <span\n                css={css`\n                  transform: rotate(90deg) translate(-4rem, 0px);\n                  display: inline-block;\n                  font-size: 1.2rem;\n                `}\n              >\n                {post.frontmatter.category}\n              </span>\n            </div>\n          </div>\n          <div\n            css={css`\n              position: relative;\n            `}\n          >\n            <div\n              css={css`\n                position: absolute;\n                transform: rotate(25deg);\n                top: -20%;\n                left: 10%;\n                width: 40%;\n              `}\n            >\n              <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 -139 106 139\">\n                <path\n                  d=\"M 0 -1 L 0 -139 L 106 -139 L 106 0 L 0 -1 Z\"\n                  stroke=\"#FFF\"\n                  stroke-width=\"0.3\"\n                  fill=\"none\"\n                />\n              </svg>\n            </div>\n            <p\n              css={css`max-width: 30%;\n                        position: absolute;\n                        line-height: 2;\n                        left: 19%;\n                        top: 25%;\n                        font-size: 1.1rem;\n                    }`}\n            >\n              {post.frontmatter.intro}\n            </p>\n            <div\n              css={css`max-width: 30%;\n                        position: absolute;\n                        line-height: 1.5;\n                        right: 15%;\n                        top: 10%;\n                        font-size: 1.1rem;\n                    }`}\n            >\n              <p>\n                {post.frontmatter.startDate} - {post.frontmatter.endDate}\n              </p>\n              <hr />\n              <p css={[roleTitle]}>Skill:</p>\n              {post.frontmatter.skills.map((item) => (\n                <p css={[roleTitle]}>{item}</p>\n              ))}\n            </div>\n          </div>\n        </section>\n        <section\n          css={[\n            boxWrapper,\n            css`\n              position: sticky;\n              top: 0px;\n            `,\n          ]}\n        >\n          {mainImages[post.frontmatter.images] ? (\n            <img\n              src={mainImages[post.frontmatter.images]}\n              alt={post.frontmatter.images}\n              css={{ width: '100%' }}\n            />\n          ) : (\n            <div\n              css={{\n                width: '100%',\n                backgroundColor: '#303030',\n                height: '100%',\n                color: '#EC87E4',\n                fontSize: '2rem',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n              }}\n            >\n              <span\n                css={{\n                  padding: '0 100px 0 100px',\n                }}\n              >\n                {noImageComment}\n              </span>\n            </div>\n          )}\n        </section>\n        <section\n          css={[\n            boxWrapper,\n            css`\n              background: black;\n              width: 100%;\n              position: sticky;\n            `,\n          ]}\n        >\n          <div\n            css={css`\n              font-size: 1.2rem;\n              color: white;\n              position: relative;\n              top: 10%;\n              left: 10%;\n              width: 380px;\n              max-width: 380px;\n            `}\n          >\n            {post.frontmatter.roles.length > 5 && (\n              <>\n                <Button\n                  className=\"slideBtn\"\n                  small\n                  isShow\n                  backGroundcolor=\"transparent\"\n                  absolute\n                  left=\"0\"\n                  style={{\n                    left: '-14%',\n                  }}\n                  ref={navigationRolePrevRef}\n                >\n                  <ArrowBackWhiteCircleIcon />\n                </Button>\n                <Button\n                  className=\"slideBtn\"\n                  small\n                  isShow\n                  backGroundcolor=\"transparent\"\n                  absolute\n                  right=\"0\"\n                  style={{\n                    right: '-12%',\n                  }}\n                  ref={navigationRoleNextRef}\n                >\n                  <RightArrowWhiteCircleIcon />\n                </Button>\n              </>\n            )}\n\n            <Swiper\n              navigation={true}\n              slidesPerView={5}\n              navigation={{\n                prevEl: navigationRolePrevRef.current,\n                nextEl: navigationRoleNextRef.current,\n              }}\n              onSwiper={(swiper) => {\n                // Delay execution for the refs to be defined\n                setTimeout(() => {\n                  // Override prevEl & nextEl now that refs are defined\n                  swiper.params.navigation.prevEl =\n                    navigationRolePrevRef.current;\n                  swiper.params.navigation.nextEl =\n                    navigationRoleNextRef.current;\n\n                  // Re-init navigation\n                  swiper.navigation.destroy();\n                  swiper.navigation.init();\n                  swiper.navigation.update();\n                });\n              }}\n            >\n              {post.frontmatter.roles.map((item, index) => (\n                <SwiperSlide key={index}>\n                  <div\n                    onClick={() => setIsShow(index)}\n                    css={css`\n                      cursor: pointer;\n                      padding: 7px 30px;\n                      background-color: #fff;\n                      border-radius: 150px;\n                      width: 10%;\n                      color: #000;\n                      text-align: center;\n                      font-size: 1rem;\n                      font-weight: bold;\n                      text-shadow: 2px 2px 2px gray;\n                      box-shadow: 0px 10px 13px -7px #000000,\n                        5px 5px 15px 5px #0000;\n                      :hover {\n                        background-color: #ddd;\n                      }\n                    `}\n                  >\n                    {index + 1}\n                  </div>\n                </SwiperSlide>\n              ))}\n            </Swiper>\n          </div>\n\n          <div\n            css={css`\n              transform: rotate(90deg);\n              display: inline-block;\n              font-size: 1.2rem;\n              color: white;\n              position: absolute;\n              top: 20%;\n              right: 17%;\n            `}\n          >\n            <div\n              css={css`\n                border: 1px solid white;\n              `}\n            ></div>\n            <span>Role</span>\n          </div>\n          <div\n            css={css`\n              display: flex;\n              justify-content: center;\n              align-items: center;\n              height: 100%;\n              overflow: hidden;\n              font-size: 1.3rem;\n              // border: 1px solid;\n            `}\n          >\n            {post.frontmatter.roles.map((item, index) => (\n              <div\n                key={index}\n                css={css`\n                  display: ${isShow === index ? 'flex' : 'none'};\n                  flex-direction: column;\n                  justify-content: center;\n                  align-items: center;\n                `}\n              >\n                <div css={[roleWrapper, titleWrapper]}>\n                  <div className=\"number-wrapper\">{index + 1}.</div>\n                  <div className=\"title-wrapper\">{item.name}</div>\n                </div>\n                <div css={[roleWrapper, descWrapper]}>\n                  {item.desc.map((el, index) => (\n                    <div key={index} className=\"desc-wrapper\">\n                      # {el}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </section>\n        <section\n          css={[\n            boxWrapper,\n            css`\n              position: sticky;\n              top: 0px;\n              background: #fff;\n            `,\n          ]}\n        >\n          {getImage(post.frontmatter.images).length ? (\n            <>\n              <Button\n                className=\"slideBtn\"\n                small\n                isShow\n                backGroundcolor=\"transparent\"\n                absolute\n                left=\"0\"\n                style={{\n                  top: '50%',\n                }}\n                ref={navigationPrevRef}\n              >\n                <ArrowBackCircleIcon />\n              </Button>\n              <Button\n                className=\"slideBtn\"\n                small\n                isShow\n                backGroundcolor=\"transparent\"\n                absolute\n                right=\"0\"\n                style={{\n                  top: '50%',\n                }}\n                ref={navigationNextRef}\n              >\n                <RightArrowCircleIcon />\n              </Button>\n              <div\n                css={{\n                  width: '100%',\n                  margin: '0 auto',\n                }}\n              >\n                <Swiper\n                  navigation={true}\n                  autoHeight={true}\n                  navigation={{\n                    prevEl: navigationPrevRef.current,\n                    nextEl: navigationNextRef.current,\n                  }}\n                  onSwiper={(swiper) => {\n                    // Delay execution for the refs to be defined\n                    setTimeout(() => {\n                      // Override prevEl & nextEl now that refs are defined\n                      swiper.params.navigation.prevEl =\n                        navigationPrevRef.current;\n                      swiper.params.navigation.nextEl =\n                        navigationNextRef.current;\n\n                      // Re-init navigation\n                      swiper.navigation.destroy();\n                      swiper.navigation.init();\n                      swiper.navigation.update();\n                    });\n                  }}\n                >\n                  {getImage(post.frontmatter.images).map((item, index) => (\n                    <SwiperSlide className=\"intro\" key={index}>\n                      <img\n                        src={item}\n                        alt={post.frontmatter.images}\n                        css={{ width: '100%' }}\n                      />\n                    </SwiperSlide>\n                  ))}\n                </Swiper>\n              </div>\n            </>\n          ) : (\n            <div\n              css={{\n                width: '100%',\n                backgroundColor: '#303030',\n                height: '100%',\n                color: '#EC87E4',\n                fontSize: '2rem',\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n              }}\n            >\n              <span\n                css={{\n                  padding: '0 100px 0 100px',\n                }}\n              >\n                {noImageComment}\n              </span>\n            </div>\n          )}\n        </section>\n      </AppLayout.Main>\n    </AppLayout>\n  );\n}\n\nconst boxWrapper = css`\n  height: 100vh;\n  .slideBtn {\n    svg:hover {\n      color: rgba(204, 192, 192, 1);\n    }\n  }\n`;\n\nconst roleTitle = css`\n  line-height: 0.8;\n`;\n\nconst titleWrapper = css`\n  margin-bottom: 3rem;\n  max-width: 800px;\n`;\n\nconst roleWrapper = css`\n  font-size: 1rem;\n  text-align: center;\n  font-weight: 100;\n  .number-wrapper {\n    font-size: 3.5rem;\n    text-align: center;\n    margin-bottom: 1rem;\n    font-weight: bold;\n  }\n  .title-wrapper {\n    font-size: 1.8rem;\n    font-weight: bold;\n    text-transform: capitalize;\n  }\n  .desc-wrapper {\n    text-indent: 2rem;\n    margin-top: 1rem;\n    text-align: left;\n`;\n\nconst descWrapper = css`\n  max-width: 500px;\n  margin: auto 0;\n`;\n\nexport const query = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 280)\n      html\n      frontmatter {\n        title\n        startDate(formatString: \"MM/YY\")\n        endDate(formatString: \"MM/YY\")\n        category\n        skills\n        draft\n        intro\n        images\n        roles {\n          name\n          desc\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}